{"ast":null,"code":"import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nconst defaultRetryConfig = {\n  retries: 5,\n  initialDelayMs: 100\n};\nexport default class HttpClient {\n  constructor(baseURL, getCsrfToekn, config = defaultRetryConfig) {\n    this.baseURL = baseURL;\n    this.getCsrfToekn = getCsrfToekn;\n    this.client = axios.create({\n      baseURL: baseURL,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    axiosRetry(this.client, {\n      retries: config.retries,\n      retryDelay: retry => {\n        const delay = Math.pow(2, retry) * config.initialDelayMs;\n        const jitter = delay * 0.1 * Math.random();\n        return jitter + delay;\n      },\n      retryCondition: err => axiosRetry.isNetworkOrIdempotentRequestError(err) || err.response.status === 429\n    });\n  }\n  async fetch(url, options) {\n    const {\n      body,\n      method,\n      headers\n    } = options;\n    const req = {\n      url,\n      method,\n      headers: {\n        ...headers,\n        'dwitter-csrf-token': this.getCsrfToekn()\n      },\n      data: body\n    };\n    try {\n      const res = await this.client(req);\n      return res.data;\n    } catch (err) {\n      if (err.response) {\n        const data = err.response.data;\n        const message = data && data.message ? data.message : 'Something Went Wrong';\n        throw new Error(message);\n      }\n      throw new Error('Connection Error');\n    }\n  }\n}","map":{"version":3,"names":["axios","axiosRetry","defaultRetryConfig","retries","initialDelayMs","HttpClient","constructor","baseURL","getCsrfToekn","config","client","create","headers","withCredentials","retryDelay","retry","delay","Math","pow","jitter","random","retryCondition","err","isNetworkOrIdempotentRequestError","response","status","fetch","url","options","body","method","req","data","res","message","Error"],"sources":["/Users/handoyun/Desktop/Code/Project/Dwitter/Front/src/network/http.js"],"sourcesContent":["import axios from 'axios';\nimport axiosRetry from 'axios-retry';\n\nconst defaultRetryConfig = {\n  retries: 5,\n  initialDelayMs: 100,\n};\n\nexport default class HttpClient {\n  constructor(baseURL, getCsrfToekn, config = defaultRetryConfig) {\n    this.baseURL = baseURL;\n    this.getCsrfToekn = getCsrfToekn;\n    this.client = axios.create({\n      baseURL: baseURL,\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    });\n    axiosRetry(this.client, {\n      retries: config.retries,\n      retryDelay: (retry) => {\n        const delay = Math.pow(2, retry) * config.initialDelayMs;\n        const jitter = delay * 0.1 * Math.random();\n        return jitter + delay;\n      },\n      retryCondition: (err) =>\n        axiosRetry.isNetworkOrIdempotentRequestError(err) ||\n        err.response.status === 429,\n    });\n  }\n\n  async fetch(url, options) {\n    const { body, method, headers } = options;\n    const req = {\n      url,\n      method,\n      headers: {\n        ...headers,\n        'dwitter-csrf-token': this.getCsrfToekn(),\n      },\n      data: body,\n    };\n\n    try {\n      const res = await this.client(req);\n      return res.data;\n    } catch (err) {\n      if (err.response) {\n        const data = err.response.data;\n        const message =\n          data && data.message ? data.message : 'Something Went Wrong';\n        throw new Error(message);\n      }\n      throw new Error('Connection Error');\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,aAAa;AAEpC,MAAMC,kBAAkB,GAAG;EACzBC,OAAO,EAAE,CAAC;EACVC,cAAc,EAAE;AAClB,CAAC;AAED,eAAe,MAAMC,UAAU,CAAC;EAC9BC,WAAWA,CAACC,OAAO,EAAEC,YAAY,EAAEC,MAAM,GAAGP,kBAAkB,EAAE;IAC9D,IAAI,CAACK,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,MAAM,GAAGV,KAAK,CAACW,MAAM,CAAC;MACzBJ,OAAO,EAAEA,OAAO;MAChBK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,eAAe,EAAE;IACnB,CAAC,CAAC;IACFZ,UAAU,CAAC,IAAI,CAACS,MAAM,EAAE;MACtBP,OAAO,EAAEM,MAAM,CAACN,OAAO;MACvBW,UAAU,EAAGC,KAAK,IAAK;QACrB,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,KAAK,CAAC,GAAGN,MAAM,CAACL,cAAc;QACxD,MAAMe,MAAM,GAAGH,KAAK,GAAG,GAAG,GAAGC,IAAI,CAACG,MAAM,CAAC,CAAC;QAC1C,OAAOD,MAAM,GAAGH,KAAK;MACvB,CAAC;MACDK,cAAc,EAAGC,GAAG,IAClBrB,UAAU,CAACsB,iCAAiC,CAACD,GAAG,CAAC,IACjDA,GAAG,CAACE,QAAQ,CAACC,MAAM,KAAK;IAC5B,CAAC,CAAC;EACJ;EAEA,MAAMC,KAAKA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACxB,MAAM;MAAEC,IAAI;MAAEC,MAAM;MAAElB;IAAQ,CAAC,GAAGgB,OAAO;IACzC,MAAMG,GAAG,GAAG;MACVJ,GAAG;MACHG,MAAM;MACNlB,OAAO,EAAE;QACP,GAAGA,OAAO;QACV,oBAAoB,EAAE,IAAI,CAACJ,YAAY,CAAC;MAC1C,CAAC;MACDwB,IAAI,EAAEH;IACR,CAAC;IAED,IAAI;MACF,MAAMI,GAAG,GAAG,MAAM,IAAI,CAACvB,MAAM,CAACqB,GAAG,CAAC;MAClC,OAAOE,GAAG,CAACD,IAAI;IACjB,CAAC,CAAC,OAAOV,GAAG,EAAE;MACZ,IAAIA,GAAG,CAACE,QAAQ,EAAE;QAChB,MAAMQ,IAAI,GAAGV,GAAG,CAACE,QAAQ,CAACQ,IAAI;QAC9B,MAAME,OAAO,GACXF,IAAI,IAAIA,IAAI,CAACE,OAAO,GAAGF,IAAI,CAACE,OAAO,GAAG,sBAAsB;QAC9D,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC;MAC1B;MACA,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACrC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}